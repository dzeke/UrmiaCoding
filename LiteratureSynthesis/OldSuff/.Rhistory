dfParsinejad$WithoutAsPrecip <- (dfParsinejad$`Without the restoration plan` - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
nEcologicalLevelAsPrecip <- (1274.1 - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
minYear <- 1995
maxYear <- 2026
nStabilizeStart <- 2013
nRestoreStart <- 2016
nRestoreEnd <- 2021
#nStabilizeLen <- 3
#nRestoreLen <- 5
## Define a polygons that identify the two restoration phases, 2013-2016 and 2016-2021
# Define the polygons showing each tier to add to the plot. A polygon is defined by four points in the plot space. Lower-left, Lower-right, upper-right, upper left
# Polygon name
ids <- factor(c("Stabilize","Restore"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Stablize"),
DumVal = c(1))
#Calculate midpoints
dfPolyLabel2$MidYear <- (nRestoreStart + nRestoreEnd)/2
dfPolyLabel2$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#dfPolyLabel2[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Calculate midpoints for each polygon. This is the average of the cooridinates for
# the polygon
dfPolyLabel$MidYear <- c((nStabilizeStart + nRestoreStart)/2 ,(nRestoreStart + nRestoreEnd)/2)
dfPolyLabel$PrecipPos <- (cPrecipLims[1] + 100)
# for (point in 1:nPts) {
#   #dfPolyLabel[point,c("MidYear")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   #Weighted average for Year to push things to the right of the plot
#   dfPolyLabel[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   if (point==1) {
#     dfPolyLabel[point,c("MidMead")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("MeadVol")])
#   } else {
#     dfPolyLabel[point,c("MidMead")] = 0.35*dfPositions[(4*(point-1)+1),c("MeadVol")] + 0.65*dfPositions[(4*point),c("MeadVol")]
#   }
#
# }
# Currently we need to manually merge the two together
dfPolyAll <- merge(dfPolyLabel, dfPositions, by = c("id"))
#Add a variable for the annual inflow max and mins
dfPolyAll$Precip <- c(cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1])
dfPolyAll$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#Colors for the Resotration Phase polygons
palPurples <- brewer.pal(9, "Purples") #For plotting DCP tiers
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 100, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2005,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=5) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=15),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.15, 0.4),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
cElevLimits <- c(1268,1278)
#Some parameters to calculate the right axis
cPrecipLims <- c(-1000, 0) # mm
cSlopePrecipToElev <- (cPrecipLims[2] - cPrecipLims[1])/(cElevLimits[2] - cElevLimits[1]) #Slope
cSlopeElevToPrecip <- 1 / cSlopePrecipToElev
#Calculate Precipitation as Lake Level
dfParsinejad$PrecipAsLakeLevel <- (dfParsinejad$`precipitation (mm)` - cPrecipLims[1])/cSlopePrecipToElev + cElevLimits[1]
#Calculate Lake levels as precip
dfParsinejad$ActualAsPrecip <- (dfParsinejad$Actual - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
dfParsinejad$PlannedAsPrecip <- (dfParsinejad$Planned - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
dfParsinejad$WithoutAsPrecip <- (dfParsinejad$`Without the restoration plan` - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
nEcologicalLevelAsPrecip <- (1274.1 - cElevLimits[1])/cSlopeElevToPrecip + cPrecipLims[1]
minYear <- 1995
maxYear <- 2026
nStabilizeStart <- 2013
nRestoreStart <- 2016
nRestoreEnd <- 2021
#nStabilizeLen <- 3
#nRestoreLen <- 5
## Define a polygons that identify the two restoration phases, 2013-2016 and 2016-2021
# Define the polygons showing each tier to add to the plot. A polygon is defined by four points in the plot space. Lower-left, Lower-right, upper-right, upper left
# Polygon name
ids <- factor(c("Stabilize","Restore"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Stablize"),
DumVal = c(1))
#Calculate midpoints
dfPolyLabel2$MidYear <- (nRestoreStart + nRestoreEnd)/2
dfPolyLabel2$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#dfPolyLabel2[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Calculate midpoints for each polygon. This is the average of the cooridinates for
# the polygon
dfPolyLabel$MidYear <- c((nStabilizeStart + nRestoreStart)/2 ,(nRestoreStart + nRestoreEnd)/2)
dfPolyLabel$PrecipPos <- (cPrecipLims[1] + 100)
# for (point in 1:nPts) {
#   #dfPolyLabel[point,c("MidYear")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   #Weighted average for Year to push things to the right of the plot
#   dfPolyLabel[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   if (point==1) {
#     dfPolyLabel[point,c("MidMead")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("MeadVol")])
#   } else {
#     dfPolyLabel[point,c("MidMead")] = 0.35*dfPositions[(4*(point-1)+1),c("MeadVol")] + 0.65*dfPositions[(4*point),c("MeadVol")]
#   }
#
# }
# Currently we need to manually merge the two together
dfPolyAll <- merge(dfPolyLabel, dfPositions, by = c("id"))
#Add a variable for the annual inflow max and mins
dfPolyAll$Precip <- c(cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1])
dfPolyAll$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#Colors for the Resotration Phase polygons
palPurples <- brewer.pal(9, "Purples") #For plotting DCP tiers
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 100, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2005,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=5) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=15),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.15, 0.4),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2005,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=5) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=15),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.15, 0.4),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
ids <- factor(c("Stabilize","Restore","Final"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart, nRestoreEnd,nFinishEnd,nFinishEnd,nRestoreEnd),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore", "Final"),
DumVal = c(1:nPts))
nFinishEnd <- 2026
#nStabilizeLen <- 3
#nRestoreLen <- 5
## Define a polygons that identify the two restoration phases, 2013-2016 and 2016-2021
# Define the polygons showing each tier to add to the plot. A polygon is defined by four points in the plot space. Lower-left, Lower-right, upper-right, upper left
# Polygon name
ids <- factor(c("Stabilize","Restore","Final"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart, nRestoreEnd,nFinishEnd,nFinishEnd,nRestoreEnd),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore", "Final"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Stablize"),
DumVal = c(1))
dfPolyLabel$MidYear <- c((nStabilizeStart + nRestoreStart)/2 ,(nRestoreStart + nRestoreEnd)/2, (nFinishEnd + nRestoreEnd)/2)
dfPolyLabel$PrecipPos <- (cPrecipLims[1] + 100)
ids <- factor(c("Stabilize","Restore","Final"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart, nRestoreEnd,nFinishEnd,nFinishEnd,nRestoreEnd),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore", "Final"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Stablize"),
DumVal = c(1))
#Calculate midpoints
dfPolyLabel2$MidYear <- (nRestoreStart + nRestoreEnd)/2
dfPolyLabel2$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#dfPolyLabel2[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Calculate midpoints for each polygon. This is the average of the cooridinates for
# the polygon
dfPolyLabel$MidYear <- c((nStabilizeStart + nRestoreStart)/2 ,(nRestoreStart + nRestoreEnd)/2, (nFinishEnd + nRestoreEnd)/2)
dfPolyLabel$PrecipPos <- (cPrecipLims[1] + 100)
# for (point in 1:nPts) {
#   #dfPolyLabel[point,c("MidYear")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   #Weighted average for Year to push things to the right of the plot
#   dfPolyLabel[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   if (point==1) {
#     dfPolyLabel[point,c("MidMead")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("MeadVol")])
#   } else {
#     dfPolyLabel[point,c("MidMead")] = 0.35*dfPositions[(4*(point-1)+1),c("MeadVol")] + 0.65*dfPositions[(4*point),c("MeadVol")]
#   }
#
# }
# Currently we need to manually merge the two together
dfPolyAll <- merge(dfPolyLabel, dfPositions, by = c("id"))
#Add a variable for the annual inflow max and mins
dfPolyAll$Precip <- c(cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1])
dfPolyAll$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#Colors for the Resotration Phase polygons
palPurples <- brewer.pal(9, "Purples") #For plotting DCP tiers
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle")
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2005,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=5) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[4], palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=15),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.15, 0.4),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
minYear <- 2005
maxYear <- 2026
nStabilizeStart <- 2013
nRestoreStart <- 2016
nRestoreEnd <- 2021
nFinishEnd <- 2026
#nStabilizeLen <- 3
#nRestoreLen <- 5
## Define a polygons that identify the two restoration phases, 2013-2016 and 2016-2021
# Define the polygons showing each tier to add to the plot. A polygon is defined by four points in the plot space. Lower-left, Lower-right, upper-right, upper left
# Polygon name
ids <- factor(c("Stabilize","Restore","Final"))
# Polygon corners (see above for defs)
dfPositions <- data.frame(id = rep(ids, each = 4),
Year = c(nStabilizeStart,nRestoreStart,nRestoreStart,nStabilizeStart,nRestoreStart,nRestoreEnd,nRestoreEnd,nRestoreStart, nRestoreEnd,nFinishEnd,nFinishEnd,nRestoreEnd),
PrecipVal = c(cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2]))
#Number of polygons
nPts <- nrow(dfPositions)/4
#Polygon labels
dfPolyLabel <- data.frame(id = ids,
Label = c("Stabilize", "Restore", "Final"),
DumVal = c(1:nPts))
### New PolyLabel with only one row
dfPolyLabel2 <- data.frame(id = ids[2],
Label = c("Stablize"),
DumVal = c(1))
#Calculate midpoints
dfPolyLabel2$MidYear <- (nRestoreStart + nRestoreEnd)/2
dfPolyLabel2$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#dfPolyLabel2[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#Calculate midpoints for each polygon. This is the average of the cooridinates for
# the polygon
dfPolyLabel$MidYear <- c((nStabilizeStart + nRestoreStart)/2 ,(nRestoreStart + nRestoreEnd)/2, (nFinishEnd + nRestoreEnd)/2)
dfPolyLabel$PrecipPos <- (cPrecipLims[1] + 100)
# for (point in 1:nPts) {
#   #dfPolyLabel[point,c("MidYear")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   #Weighted average for Year to push things to the right of the plot
#   dfPolyLabel[point,c("MidYear")] =  0.35*min(dfPositions[(4*(point-1)+1):(4*point),c("Year")]) + 0.65*max(dfPositions[(4*(point-1)+1):(4*point),c("Year")])
#   if (point==1) {
#     dfPolyLabel[point,c("MidMead")] = mean(dfPositions[(4*(point-1)+1):(4*point),c("MeadVol")])
#   } else {
#     dfPolyLabel[point,c("MidMead")] = 0.35*dfPositions[(4*(point-1)+1),c("MeadVol")] + 0.65*dfPositions[(4*point),c("MeadVol")]
#   }
#
# }
# Currently we need to manually merge the two together
dfPolyAll <- merge(dfPolyLabel, dfPositions, by = c("id"))
#Add a variable for the annual inflow max and mins
dfPolyAll$Precip <- c(cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1],cPrecipLims[1],cPrecipLims[2],cPrecipLims[2],cPrecipLims[1])
dfPolyAll$MidPrecip <- (cPrecipLims[1] + cPrecipLims[2])/2
#Colors for the Resotration Phase polygons
palPurples <- brewer.pal(9, "Purples") #For plotting DCP tiers
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2005,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=6) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[4], palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=15),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.15, 0.4),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2007,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=6) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[4], palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=16),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.8, 0.8),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
ggplot(data = dfParsinejad, aes(x = Year)) +
#Histogram of publication counts
# geom_bar(breaks=seq(minYear,maxYear, by=1),
#         colour = barlines,
#         position = "identity",
#         aes(fill=YearPeriod)) +
# Polygons for the different restoration phases
geom_polygon(data = dfPolyAll, aes(x = Year, y = PrecipVal, group = id, fill = as.factor(dfPolyAll$DumVal)), show.legend = F) +
# Text label the phases
geom_text(data = dfPolyLabel, aes(x=MidYear, y=cPrecipLims[1] + 50, label=Label), angle = 0, size = 7, hjust="middle") +
#scale_fill_manual(breaks = as.factor(dfPolyLabel$DumVal),values = c(palPurples[2],palPurples[3]),labels = dfPolyLabel$Label ) +
#Precipitation converted to lake level
geom_col(aes(y=-`precipitation (mm)`, fill="Precipitation"),  position = "identity", color = "black") +
#Lines of lake levels plotted in precipitation units
geom_line(aes(y=ActualAsPrecip, color="Observed", group=1), size=2) +
geom_line(aes(y=PlannedAsPrecip, color="Planned", group=1), linetype = "dashed", size=2) +
geom_line(aes(y=WithoutAsPrecip, color="Without ULRP", group=1), linetype = "dotdash", size=2) +
#Horizontal line and text label for ecological target 1274.1
geom_hline(yintercept = nEcologicalLevelAsPrecip, color="red", linetype = "longdash", size = 1.5) +
geom_text(aes(2007,nEcologicalLevelAsPrecip + 50, label="Ecological target"), color="red",size=6) +
labs(x="") +
scale_x_continuous(limits = c(minYear,maxYear), breaks = seq(minYear,maxYear,5), minor_breaks = seq(minYear,maxYear,1)) +
#scale_y_continuous("Lake Level (m)", limits = c(1268,1278), breaks = seq(1268,1278, by=2), sec.axis = sec_axis(~ (. - cElevLimits[1])* cSlopePrecipToElev  + cPrecipLims[1], name = "Precipitation (mm)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100))) +
#All axis units are in negative precipition. We are labeling the left axis from Lake level low to high.
#We are labeling the right axis from Large precip (bottom) to 0 (top)
scale_y_continuous("Lake Level (m)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(cElevLimits[1],cElevLimits[2],by=1) , sec.axis = sec_axis(~ . , name = "Precipitation\n(mm per year)", breaks = seq(cPrecipLims[1],cPrecipLims[2], by=100), labels = seq(-cPrecipLims[1],cPrecipLims[2], by=-100) )) +
scale_color_manual(breaks=c("Observed", "Planned", "Without ULRP"), values=c("Black", "Blue", "Orange")) +
#scale_fill_manual(breaks = c("Precipitation"), values=c("Grey")) +
scale_fill_manual(breaks = c("Precipitation"), values=c(palPurples[2],palPurples[3],palPurples[4], palPurples[8]), labels = c("Precipitation")) +
theme_bw() +
theme(text = element_text(size=20), legend.text=element_text(size=16),
axis.text.x = element_text(size=18, angle=90,hjust=1.1,vjust=0.5),
legend.title = element_blank(),
legend.position = c(0.85, 0.825),
legend.spacing.y = unit(-0.1, "cm"),
#legend.margin = margin(-0.5,0,0,0, unit="cm"),
legend.box.background = element_rect(color="black",size=1, fill="White", linetype="solid")) # +
